<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Memoes on WADRO</title>
    <link>https://wadro.github.io/memo/</link>
    <description>Recent content in Memoes on WADRO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Mon, 02 Aug 2021 14:19:54 +0900</lastBuildDate><atom:link href="https://wadro.github.io/memo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chapter 3  Common Programming Concepts</title>
      <link>https://wadro.github.io/memo/cs/rustlang/rust-book/chapter-3.-common-programming-concepts/</link>
      <pubDate>Mon, 02 Aug 2021 14:19:54 +0900</pubDate>
      
      <guid>https://wadro.github.io/memo/cs/rustlang/rust-book/chapter-3.-common-programming-concepts/</guid>
      <description>변수 선언 기본적으로 rust 의 변수는 immutable 합니다. 즉, 변하지 않는 값이 되죠.
(c 나 여러 언어에서 const 키워드를 사용하는 것과 같습니다. 기본 변수 타입이 const 인 셈이죠.)
이걸 통해 안전성과 쉬운 병렬성을 달성할수가 있게됩니다.(왜 그런지는 배우면서 차차 알수 있겠죠. 저도 아직 모름&amp;hellip;)
물론, 변하는 값으로 설정하는 방법도 있습니다.
이제부터 왜 그렇게 설계했는지를 살펴봅시다.
먼저 변수를 선언하고나면, 그 이름을 가진 변수의 값을 바꿀수 없습니다.
한번 예시를 통해 살펴 볼게요.
fn main() { let x = 5; println!</description>
    </item>
    
    <item>
      <title>hello, world! and cargo</title>
      <link>https://wadro.github.io/memo/cs/rustlang/rust-book/hello-world-and-cargo/</link>
      <pubDate>Mon, 02 Aug 2021 12:05:34 +0900</pubDate>
      
      <guid>https://wadro.github.io/memo/cs/rustlang/rust-book/hello-world-and-cargo/</guid>
      <description>착한 반말 컨셉 Rust 튜토리얼  먼저 WSL2 설치 가이드 링크 설치 후 기초 예제 링크  terminal
$ mkdir ~/projects $ cd ~/projects $ mkdir hello_world $ cd hello_world  hello_world.rs fn main() { println!(&amp;quot;Hello, world!&amp;quot;); }  output $ rustc main.rs $ ./main Hello, world!  cargo 버젼 체크 $ cargo --version  새로운 프로젝트 생성 $ cargo new hello_cargo $ cd hello_cargo  cargo.toml 파일 구성 [package] name = &amp;quot;hello_cargo&amp;quot; version = &amp;quot;0.</description>
    </item>
    
    <item>
      <title>ch01</title>
      <link>https://wadro.github.io/memo/cs/rustlang/rust-book/ch01/</link>
      <pubDate>Mon, 26 Jul 2021 13:55:43 +0900</pubDate>
      
      <guid>https://wadro.github.io/memo/cs/rustlang/rust-book/ch01/</guid>
      <description>본 글은 doc.rust-lang-org 의 튜토리얼 내용을 정리한 글입니다. rust lang 특징  Rust programming language is fundamentally about empowerment “systems-level” without taking on the customary risk of crashes or security holes, and without having to learn the fine points of a fickle toolchain. the language is designed to guide you naturally towards reliable code that is efficient in terms of speed and memory usage. introducing parallelism in Rust is a relatively low-risk operation: the compiler will catch the classical mistakes for you Rust isn’t limited to low-level systems programming - CLI apps, web servers, and many other kinds of code  rust lang 사용처  Rust is proving to be a productive tool for collaborating among large teams of developers with varying levels of systems programming knowledge.</description>
    </item>
    
    <item>
      <title>lab golang study tutorials 03</title>
      <link>https://wadro.github.io/memo/cs/go/lab-golang-study-tutorials-03/</link>
      <pubDate>Sun, 25 Jul 2021 14:03:14 +0900</pubDate>
      
      <guid>https://wadro.github.io/memo/cs/go/lab-golang-study-tutorials-03/</guid>
      <description>Go tutorials  📔📝본 내용은 tour.golang.org 에 있는 내용을 정리한 글입니다.  Hello, Go world! 3 codeblocks goroutines.go package main import ( &amp;quot;fmt&amp;quot; &amp;quot;time&amp;quot; ) func say(s string) { for i := 0; i &amp;lt; 5; i++ { time.Sleep(100 * time.Millisecond) fmt.Println(s) } } func main() { go say(&amp;quot;goroutine0&amp;quot;) say(&amp;quot;main0&amp;quot;) // 순차 실행끼리는 순서 맞춰서 실행됨 say(&amp;quot;main1&amp;quot;) // goroutine 끼리는 독립적으로 비동기식으로 처리됨 () go say(&amp;quot;goroutine2&amp;quot;) // 나중에 나오는 순차 실행과 함께 실행됨 go say(&amp;quot;goroutine1&amp;quot;) // 여기서는 say(&amp;quot;main2&amp;quot;) say(&amp;quot;main2&amp;quot;) }  output main0 goroutine0 goroutine0 main0 main0 goroutine0 goroutine0 main0 main0 goroutine0 main1 main1 main1 main1 main1 goroutine1 main2 goroutine2 main2 goroutine1 goroutine2 goroutine1 main2 goroutine2 main2 goroutine1 goroutine2 goroutine1 main2  channels.</description>
    </item>
    
    <item>
      <title>lab golang study tutorials 02</title>
      <link>https://wadro.github.io/memo/cs/go/lab-golang-study-tutorials-02/</link>
      <pubDate>Thu, 22 Jul 2021 19:55:35 +0900</pubDate>
      
      <guid>https://wadro.github.io/memo/cs/go/lab-golang-study-tutorials-02/</guid>
      <description>Go tutorials  📔📝본 내용은 tour.golang.org 에 있는 내용을 정리한 글입니다. method 부터 concurrency 전까지  Go method! package main import ( &amp;quot;fmt&amp;quot; &amp;quot;math&amp;quot; ) type Vertex struct { X, Y float64 } func (v Vertex) AbsMethod() float64 { return math.Sqrt(v.X*v.X + v.Y*v.Y) } func AbsFunc(v Vertex) float64 { return math.Sqrt(v.X*v.X + v.Y*v.Y) } type MyFloat float64 // 메소드 만들때 주의사항, 일반 타입 안되고 custom 타입만 가능함. 같은 패키지 내에 선언되어 있어야함.</description>
    </item>
    
    <item>
      <title>Consensus Protocols That Meet Different Business Demands  Part I</title>
      <link>https://wadro.github.io/memo/graduate/references/consensus-protocols-that-meet-different-business-demands.-part-i/</link>
      <pubDate>Thu, 15 Jul 2021 13:30:26 +0900</pubDate>
      
      <guid>https://wadro.github.io/memo/graduate/references/consensus-protocols-that-meet-different-business-demands.-part-i/</guid>
      <description>논문 레퍼런스 정리 (아래 링크를 한국어로 번역하였습니다.)
read://https_blockchain.intellectsoft.net/?url=https%3A%2F%2Fblockchain.intellectsoft.net%2Fblog%2Fconsensus-protocols-that-meet-different-business-demands%2F
https://blockchain.intellectsoft.net/blog/consensus-protocols-that-meet-different-business-demands/
overview In our our previous post we described different types of blockchain. However, they only characterize the environment in which blockchain can operate. The heart of distributed ledger technology (DLT) is the consensus protocol.
이전 게시물에서 다양한 유형의 블록체인에 대해 설명했습니다. 그러나 그것들은 블록체인이 작동할 수 있는 환경만을 특징짓습니다. 분산 원장 기술(DLT)의 핵심은 합의 프로토콜입니다.
Interestingly, mathematicians and engineers have been developing distributed networks and consensensus protocols for decades but only with the emergence of Bitcoin has this technology made a leap forward.</description>
    </item>
    
    <item>
      <title>lab golang study tutorials 01</title>
      <link>https://wadro.github.io/memo/cs/go/lab-golang-study-tutorials-01/</link>
      <pubDate>Thu, 15 Jul 2021 13:19:21 +0900</pubDate>
      
      <guid>https://wadro.github.io/memo/cs/go/lab-golang-study-tutorials-01/</guid>
      <description>Go tutorials  📔📝본 내용은 tour.golang.org 에 있는 내용을 정리한 글입니다.  Hello, Go world! (전 튜토리얼을 하나로 모음) package main // 파일들(함수들)을 모아놓은 하나의 세트 import ( // 이런식으로 한번에 임포트 하는것이 권장됨(factored style) &amp;quot;fmt&amp;quot; // 표준 라이브러리 &amp;quot;time&amp;quot; // 시간 관련 라이브러리 &amp;quot;math/rand&amp;quot; // package rand 로 시작하는 파일들로 구성됨. &amp;quot;math/cmplx&amp;quot; // 복소수 라이브러리 &amp;quot;strings&amp;quot; // 문자열 관련 함수 모음 ) /* 함수 선언 방법: func 함수명(변수_이름 타입, .</description>
    </item>
    
  </channel>
</rss>
