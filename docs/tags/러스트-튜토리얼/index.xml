<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>러스트 튜토리얼 on WADRO</title>
    <link>https://wadro.github.io/tags/%EB%9F%AC%EC%8A%A4%ED%8A%B8-%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/</link>
    <description>Recent content in 러스트 튜토리얼 on WADRO</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    <lastBuildDate>Mon, 26 Jul 2021 13:55:43 +0900</lastBuildDate><atom:link href="https://wadro.github.io/tags/%EB%9F%AC%EC%8A%A4%ED%8A%B8-%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ch01</title>
      <link>https://wadro.github.io/memo/cs/rustlang/rust-book/ch01/</link>
      <pubDate>Mon, 26 Jul 2021 13:55:43 +0900</pubDate>
      
      <guid>https://wadro.github.io/memo/cs/rustlang/rust-book/ch01/</guid>
      <description>본 글은 doc.rust-lang-org 의 튜토리얼 내용을 정리한 글입니다. rust lang 특징  Rust programming language is fundamentally about empowerment “systems-level” without taking on the customary risk of crashes or security holes, and without having to learn the fine points of a fickle toolchain. the language is designed to guide you naturally towards reliable code that is efficient in terms of speed and memory usage. introducing parallelism in Rust is a relatively low-risk operation: the compiler will catch the classical mistakes for you Rust isn’t limited to low-level systems programming - CLI apps, web servers, and many other kinds of code  rust lang 사용처  Rust is proving to be a productive tool for collaborating among large teams of developers with varying levels of systems programming knowledge.</description>
    </item>
    
  </channel>
</rss>
